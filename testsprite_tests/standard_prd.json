{
  "meta": {
    "project": "AnswersHelp Test Prep Platform",
    "date": "2025-10-04",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "AnswersHelp is a web-based test preparation platform that offers high school students authentic, timed practice tests for SAT, ACT, PSAT, and AP exams. It provides an intuitive, College Board Bluebook-style interface with instant feedback, professional tools like calculators and highlighters, and a waitlist notification system to enhance learning and convenience.",
  "core_goals": [
    "Provide authentic, timed, and practice standardized tests mirroring real exam conditions.",
    "Deliver instant feedback on student answers to improve learning outcomes.",
    "Enable students to join waitlists and receive notifications for upcoming tests.",
    "Support progress auto-save and resume features to facilitate flexible study schedules.",
    "Offer professional testing tools including a calculator, highlighter, and answer eliminator.",
    "Allow admins to easily upload test content manually or via OCR image processing.",
    "Maintain high security and data privacy with Supabase and RLS policies.",
    "Ensure accessibility and responsive design across devices for all users."
  ],
  "key_features": [
    "Live, timed practice tests for SAT, ACT, PSAT, and AP exams with a professional interface.",
    "Join waitlist functionality with email notifications for upcoming tests.",
    "Intuitive test interface mimicking College Board Bluebook, with multiple modules and question navigation.",
    "Instant answer feedback with correct/incorrect indicators and detailed explanations.",
    "Professional tools: floating calculator, text highlighter, answer eliminator, and flag system.",
    "Auto-save of test progress and user answers with resume capability.",
    "Admin upload of test content via JSON or OCR-processed images with progress indicators.",
    "Secure authentication via Supabase Auth with bearer tokens or cookies.",
    "Detailed tracking of user progress and analytics for improvement insights.",
    "Comprehensive error handling and fallback demo questions for uninterrupted experience."
  ],
  "user_flow_summary": [
    "Student visits /live to view available practice tests categorized by type and status color codes.",
    "Student joins waitlist by submitting email for upcoming tests and receives confirmation toast and notifications.",
    "When test is available, student initiates test loading from test_resources and enters timed test environment.",
    "Student completes questions module-by-module with access to professional tools and real-time feedback after each answer.",
    "Answers are auto-saved, enabling students to close or refresh browser and resume later.",
    "Upon test completion or timer expiration, overall results including score, time, and detailed explanations are displayed.",
    "Admins upload new tests via JSON or OCR at /live/upload with password protection.",
    "Admins manage waitlists and export emails for notification campaigns via Supabase dashboard."
  ],
  "validation_criteria": [
    "Test content loads correctly and matches the JSON or OCR input without errors.",
    "Users can successfully join waitlists and receive notification emails when tests become available.",
    "Timed tests operate with accurate countdown timers and auto-submit on expiry.",
    "Answer selections trigger instant feedback with correct scoring and explanations.",
    "Auto-save reliably preserves user progress across sessions and devices.",
    "Admin uploads processes OCR images correctly and saves parsed tests to database.",
    "Security measures prevent unauthorized access to test data and user progress.",
    "Responsive layout and accessibility features function correctly on mobile, tablet, desktop, and 4K displays.",
    "Error handling gracefully manages API failures with user-friendly messages and fallback demos.",
    "All user actions are tracked accurately in Supabase tables for analytics and reporting."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 15 (App Router, Turbopack)",
      "React 19",
      "Tailwind CSS 4",
      "Supabase (Postgres, Auth, Storage)",
      "Node.js 20",
      "Vercel"
    ],
    "features": [
      {
        "name": "File Download",
        "description": "Fetch binary file content by id; returns image or binary with appropriate headers and graceful SVG placeholder when missing.",
        "files": [
          "study-resources/src/app/api/file/[id]/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "File Download API",
            "version": "1.0.0"
          },
          "servers": [
            {
              "url": "http://localhost:3000"
            }
          ],
          "paths": {
            "/api/file/{id}": {
              "get": {
                "summary": "Get file binary by id",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Binary file content",
                    "content": {
                      "image/*": {
                        "schema": {
                          "type": "string",
                          "format": "binary"
                        }
                      },
                      "application/octet-stream": {
                        "schema": {
                          "type": "string",
                          "format": "binary"
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Bad request",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "404": {
                    "description": "Not found",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Internal error",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "File Text Content",
        "description": "Return text content for text-like files (txt, md, json, etc.).",
        "files": [
          "study-resources/src/app/api/file/[id]/content/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "File Text Content API",
            "version": "1.0.0"
          },
          "servers": [
            {
              "url": "http://localhost:3000"
            }
          ],
          "paths": {
            "/api/file/{id}/content": {
              "get": {
                "summary": "Get text content for a file by id",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Text content",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "content": {
                              "type": "string"
                            },
                            "filename": {
                              "type": "string"
                            },
                            "mime": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "content"
                          ]
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Not a text file",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "404": {
                    "description": "Not found in storage",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Internal error",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Ensure User",
        "description": "Authenticate (Bearer or Supabase cookies) and create a user row if missing; returns the user.",
        "files": [
          "study-resources/src/app/api/ensure-user/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Ensure User API",
            "version": "1.0.0"
          },
          "servers": [
            {
              "url": "http://localhost:3000"
            }
          ],
          "components": {
            "securitySchemes": {
              "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
              },
              "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sb-access-token"
              }
            }
          },
          "paths": {
            "/api/ensure-user": {
              "post": {
                "summary": "Ensure a user exists",
                "security": [
                  {
                    "bearerAuth": []
                  },
                  {
                    "cookieAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "User exists/created",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "ok": {
                              "type": "boolean"
                            },
                            "user": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "handle": {
                                  "type": "string"
                                },
                                "handle_version": {
                                  "type": "number"
                                }
                              }
                            },
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Unauthorized",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Database/Internal error",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Delete Resource",
        "description": "Delete a resource and related storage/rows by id.",
        "files": [
          "study-resources/src/app/api/resource/[id]/delete/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Delete Resource API",
            "version": "1.0.0"
          },
          "servers": [
            {
              "url": "http://localhost:3000"
            }
          ],
          "paths": {
            "/api/resource/{id}/delete": {
              "delete": {
                "summary": "Delete a resource by id",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Deleted",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Bad request",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "500": {
                    "description": "Internal error",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "error": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
