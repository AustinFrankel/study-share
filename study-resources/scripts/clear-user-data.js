#!/usr/bin/env node

/**
 * Clear User Data Script
 * 
 * This script removes all user-generated content from the database while
 * preserving the core structure (schools, subjects, etc.)
 * 
 * WARNING: This will permanently delete all user data!
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase configuration!')
  console.error('Please ensure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set in .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: { persistSession: false, autoRefreshToken: false, detectSessionInUrl: false }
})

async function clearUserData() {
  console.log('üßπ Starting user data cleanup...')
  
  try {
    // 1. Clear user-generated content (in dependency order)
    console.log('üìù Clearing comments...')
    const { error: commentsError } = await supabase
      .from('comments')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000') // Delete all
    
    if (commentsError) {
      console.warn('‚ö†Ô∏è  Comments error:', commentsError.message)
    } else {
      console.log('‚úÖ Comments cleared')
    }

    console.log('üó≥Ô∏è  Clearing votes...')
    const { error: votesError } = await supabase
      .from('votes')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (votesError) {
      console.warn('‚ö†Ô∏è  Votes error:', votesError.message)
    } else {
      console.log('‚úÖ Votes cleared')
    }

    console.log('üè∑Ô∏è  Clearing resource tags...')
    const { error: resourceTagsError } = await supabase
      .from('resource_tags')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (resourceTagsError) {
      console.warn('‚ö†Ô∏è  Resource tags error:', resourceTagsError.message)
    } else {
      console.log('‚úÖ Resource tags cleared')
    }

    console.log('üö© Clearing flags...')
    const { error: flagsError } = await supabase
      .from('flags')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (flagsError) {
      console.warn('‚ö†Ô∏è  Flags error:', flagsError.message)
    } else {
      console.log('‚úÖ Flags cleared')
    }

    console.log('ü§ñ Clearing AI derivatives...')
    const { error: aiError } = await supabase
      .from('ai_derivatives')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (aiError) {
      console.warn('‚ö†Ô∏è  AI derivatives error:', aiError.message)
    } else {
      console.log('‚úÖ AI derivatives cleared')
    }

    console.log('üìÅ Clearing files...')
    const { error: filesError } = await supabase
      .from('files')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (filesError) {
      console.warn('‚ö†Ô∏è  Files error:', filesError.message)
    } else {
      console.log('‚úÖ Files cleared')
    }

    console.log('üìö Clearing resources...')
    const { error: resourcesError } = await supabase
      .from('resources')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (resourcesError) {
      console.warn('‚ö†Ô∏è  Resources error:', resourcesError.message)
    } else {
      console.log('‚úÖ Resources cleared')
    }

    console.log('üë• Clearing users...')
    const { error: usersError } = await supabase
      .from('users')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (usersError) {
      console.warn('‚ö†Ô∏è  Users error:', usersError.message)
    } else {
      console.log('‚úÖ Users cleared')
    }

    console.log('üéØ Clearing points ledger...')
    const { error: pointsError } = await supabase
      .from('points_ledger')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (pointsError) {
      console.warn('‚ö†Ô∏è  Points ledger error:', pointsError.message)
    } else {
      console.log('‚úÖ Points ledger cleared')
    }

    console.log('üë®‚Äçüè´ Clearing teachers...')
    const { error: teachersError } = await supabase
      .from('teachers')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (teachersError) {
      console.warn('‚ö†Ô∏è  Teachers error:', teachersError.message)
    } else {
      console.log('‚úÖ Teachers cleared')
    }

    console.log('üìñ Clearing classes...')
    const { error: classesError } = await supabase
      .from('classes')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')
    
    if (classesError) {
      console.warn('‚ö†Ô∏è  Classes error:', classesError.message)
    } else {
      console.log('‚úÖ Classes cleared')
    }

    // 2. Clear storage bucket (if accessible)
    console.log('üóÇÔ∏è  Clearing storage bucket...')
    try {
      const { data: files, error: listError } = await supabase.storage
        .from('resources')
        .list('', { limit: 1000 })
      
      if (listError) {
        console.warn('‚ö†Ô∏è  Could not list storage files:', listError.message)
      } else if (files && files.length > 0) {
        const filePaths = files.map(file => file.name)
        const { error: deleteError } = await supabase.storage
          .from('resources')
          .remove(filePaths)
        
        if (deleteError) {
          console.warn('‚ö†Ô∏è  Storage deletion error:', deleteError.message)
        } else {
          console.log(`‚úÖ Cleared ${files.length} files from storage`)
        }
      } else {
        console.log('‚úÖ Storage bucket is already empty')
      }
    } catch (storageError) {
      console.warn('‚ö†Ô∏è  Storage access error:', storageError.message)
    }

    console.log('')
    console.log('üéâ User data cleanup completed!')
    console.log('')
    console.log('üìã Summary of cleared data:')
    console.log('   ‚Ä¢ All user accounts')
    console.log('   ‚Ä¢ All uploaded resources')
    console.log('   ‚Ä¢ All file attachments')
    console.log('   ‚Ä¢ All comments and votes')
    console.log('   ‚Ä¢ All AI-generated content')
    console.log('   ‚Ä¢ All teachers and classes')
    console.log('   ‚Ä¢ All points and gamification data')
    console.log('   ‚Ä¢ All flags and tags')
    console.log('   ‚Ä¢ All storage files')
    console.log('')
    console.log('‚úÖ The website is now clean of user-generated content!')
    console.log('   Core structure (schools, subjects) has been preserved.')

  } catch (error) {
    console.error('‚ùå Error during cleanup:', error)
    process.exit(1)
  }
}

// Run the cleanup
clearUserData()
